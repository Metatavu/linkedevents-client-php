<?php
/**
 * Place
 *
 * PHP version 5
 *
 * @category Class
 * @package  Metatavu\LinkedEvents
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Linked Events information API
 *
 * Linked Events provides categorized data on events and places using JSON-LD format.  Events can be searched by date and location. Location can be exact address or larger area such as neighbourhood or borough  JSON-LD format is streamlined using include mechanism. API users can request that certain fields are included directly into the result, instead of being hyperlinks to objects.  Several fields are multilingual. These are implemented as object with each language variant as property. In this specification each multilingual field has (fi,sv,en) property triplet as example.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Metatavu\LinkedEvents\Model;

use \ArrayAccess;

/**
 * Place Class Doc Comment
 *
 * @category    Class
 * @description Places describe physical locations for events and means for contacting people responsible for these locations. Place definitions come from organizations publishing events (field \&quot;publisher\&quot;) and can thus have slightly different semantics between places sourced from different organizations.
 * @package     Metatavu\LinkedEvents
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Place implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'place';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'customData' => '\Metatavu\LinkedEvents\Model\PlaceCustomData[]',
        'name' => '\Metatavu\LinkedEvents\Model\PlaceName',
        'images' => '\Metatavu\LinkedEvents\Model\Image[]',
        'originId' => 'string',
        'createdTime' => '\DateTime',
        'lastModifiedTime' => '\DateTime',
        'infoUrl' => '\Metatavu\LinkedEvents\Model\PlaceInfoUrl',
        'description' => '\Metatavu\LinkedEvents\Model\PlaceDescription',
        'position' => '\Metatavu\LinkedEvents\Model\PlacePosition',
        'email' => 'string',
        'telephone' => '\Metatavu\LinkedEvents\Model\PlaceTelephone',
        'contactType' => 'string',
        'streetAddress' => '\Metatavu\LinkedEvents\Model\PlaceStreetAddress',
        'addressLocality' => '\Metatavu\LinkedEvents\Model\PlaceAddressLocality',
        'addressRegion' => 'string',
        'postalCode' => 'string',
        'postOfficeBoxNum' => 'string',
        'addressCountry' => 'string',
        'deleted' => 'bool',
        'dataSource' => 'string',
        'publisher' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'customData' => null,
        'name' => null,
        'images' => null,
        'originId' => null,
        'createdTime' => 'date-time',
        'lastModifiedTime' => 'date-time',
        'infoUrl' => null,
        'description' => null,
        'position' => null,
        'email' => null,
        'telephone' => null,
        'contactType' => null,
        'streetAddress' => null,
        'addressLocality' => null,
        'addressRegion' => null,
        'postalCode' => null,
        'postOfficeBoxNum' => null,
        'addressCountry' => null,
        'deleted' => null,
        'dataSource' => null,
        'publisher' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'customData' => 'custom_data',
        'name' => 'name',
        'images' => 'images',
        'originId' => 'origin_id',
        'createdTime' => 'created_time',
        'lastModifiedTime' => 'last_modified_time',
        'infoUrl' => 'info_url',
        'description' => 'description',
        'position' => 'position',
        'email' => 'email',
        'telephone' => 'telephone',
        'contactType' => 'contact_type',
        'streetAddress' => 'street_address',
        'addressLocality' => 'address_locality',
        'addressRegion' => 'address_region',
        'postalCode' => 'postal_code',
        'postOfficeBoxNum' => 'post_office_box_num',
        'addressCountry' => 'address_country',
        'deleted' => 'deleted',
        'dataSource' => 'data_source',
        'publisher' => 'publisher'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'customData' => 'setCustomData',
        'name' => 'setName',
        'images' => 'setImages',
        'originId' => 'setOriginId',
        'createdTime' => 'setCreatedTime',
        'lastModifiedTime' => 'setLastModifiedTime',
        'infoUrl' => 'setInfoUrl',
        'description' => 'setDescription',
        'position' => 'setPosition',
        'email' => 'setEmail',
        'telephone' => 'setTelephone',
        'contactType' => 'setContactType',
        'streetAddress' => 'setStreetAddress',
        'addressLocality' => 'setAddressLocality',
        'addressRegion' => 'setAddressRegion',
        'postalCode' => 'setPostalCode',
        'postOfficeBoxNum' => 'setPostOfficeBoxNum',
        'addressCountry' => 'setAddressCountry',
        'deleted' => 'setDeleted',
        'dataSource' => 'setDataSource',
        'publisher' => 'setPublisher'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'customData' => 'getCustomData',
        'name' => 'getName',
        'images' => 'getImages',
        'originId' => 'getOriginId',
        'createdTime' => 'getCreatedTime',
        'lastModifiedTime' => 'getLastModifiedTime',
        'infoUrl' => 'getInfoUrl',
        'description' => 'getDescription',
        'position' => 'getPosition',
        'email' => 'getEmail',
        'telephone' => 'getTelephone',
        'contactType' => 'getContactType',
        'streetAddress' => 'getStreetAddress',
        'addressLocality' => 'getAddressLocality',
        'addressRegion' => 'getAddressRegion',
        'postalCode' => 'getPostalCode',
        'postOfficeBoxNum' => 'getPostOfficeBoxNum',
        'addressCountry' => 'getAddressCountry',
        'deleted' => 'getDeleted',
        'dataSource' => 'getDataSource',
        'publisher' => 'getPublisher'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['customData'] = isset($data['customData']) ? $data['customData'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['images'] = isset($data['images']) ? $data['images'] : null;
        $this->container['originId'] = isset($data['originId']) ? $data['originId'] : null;
        $this->container['createdTime'] = isset($data['createdTime']) ? $data['createdTime'] : null;
        $this->container['lastModifiedTime'] = isset($data['lastModifiedTime']) ? $data['lastModifiedTime'] : null;
        $this->container['infoUrl'] = isset($data['infoUrl']) ? $data['infoUrl'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['position'] = isset($data['position']) ? $data['position'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['telephone'] = isset($data['telephone']) ? $data['telephone'] : null;
        $this->container['contactType'] = isset($data['contactType']) ? $data['contactType'] : null;
        $this->container['streetAddress'] = isset($data['streetAddress']) ? $data['streetAddress'] : null;
        $this->container['addressLocality'] = isset($data['addressLocality']) ? $data['addressLocality'] : null;
        $this->container['addressRegion'] = isset($data['addressRegion']) ? $data['addressRegion'] : null;
        $this->container['postalCode'] = isset($data['postalCode']) ? $data['postalCode'] : null;
        $this->container['postOfficeBoxNum'] = isset($data['postOfficeBoxNum']) ? $data['postOfficeBoxNum'] : null;
        $this->container['addressCountry'] = isset($data['addressCountry']) ? $data['addressCountry'] : null;
        $this->container['deleted'] = isset($data['deleted']) ? $data['deleted'] : null;
        $this->container['dataSource'] = isset($data['dataSource']) ? $data['dataSource'] : null;
        $this->container['publisher'] = isset($data['publisher']) ? $data['publisher'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id Consists of source prefix and source specific identifier. These should be URIs uniquely identifying the place, and preferably also well formed http-URLs pointing to more information about the place.
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets customData
     * @return \Metatavu\LinkedEvents\Model\PlaceCustomData[]
     */
    public function getCustomData()
    {
        return $this->container['customData'];
    }

    /**
     * Sets customData
     * @param \Metatavu\LinkedEvents\Model\PlaceCustomData[] $customData Key value field for custom data. FIXME: is there 6Aika-wide use case for this?
     * @return $this
     */
    public function setCustomData($customData)
    {
        $this->container['customData'] = $customData;

        return $this;
    }

    /**
     * Gets name
     * @return \Metatavu\LinkedEvents\Model\PlaceName
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param \Metatavu\LinkedEvents\Model\PlaceName $name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets images
     * @return \Metatavu\LinkedEvents\Model\Image[]
     */
    public function getImages()
    {
        return $this->container['images'];
    }

    /**
     * Sets images
     * @param \Metatavu\LinkedEvents\Model\Image[] $images
     * @return $this
     */
    public function setImages($images)
    {
        $this->container['images'] = $images;

        return $this;
    }

    /**
     * Gets originId
     * @return string
     */
    public function getOriginId()
    {
        return $this->container['originId'];
    }

    /**
     * Sets originId
     * @param string $originId Place identifier in the originating system, these should be in same format as id but variations are more likely than with id.
     * @return $this
     */
    public function setOriginId($originId)
    {
        $this->container['originId'] = $originId;

        return $this;
    }

    /**
     * Gets createdTime
     * @return \DateTime
     */
    public function getCreatedTime()
    {
        return $this->container['createdTime'];
    }

    /**
     * Sets createdTime
     * @param \DateTime $createdTime Creation time for the place entry.
     * @return $this
     */
    public function setCreatedTime($createdTime)
    {
        $this->container['createdTime'] = $createdTime;

        return $this;
    }

    /**
     * Gets lastModifiedTime
     * @return \DateTime
     */
    public function getLastModifiedTime()
    {
        return $this->container['lastModifiedTime'];
    }

    /**
     * Sets lastModifiedTime
     * @param \DateTime $lastModifiedTime Time this place was modified in the datastore behind the API (not necessarily in the originating system)
     * @return $this
     */
    public function setLastModifiedTime($lastModifiedTime)
    {
        $this->container['lastModifiedTime'] = $lastModifiedTime;

        return $this;
    }

    /**
     * Gets infoUrl
     * @return \Metatavu\LinkedEvents\Model\PlaceInfoUrl
     */
    public function getInfoUrl()
    {
        return $this->container['infoUrl'];
    }

    /**
     * Sets infoUrl
     * @param \Metatavu\LinkedEvents\Model\PlaceInfoUrl $infoUrl
     * @return $this
     */
    public function setInfoUrl($infoUrl)
    {
        $this->container['infoUrl'] = $infoUrl;

        return $this;
    }

    /**
     * Gets description
     * @return \Metatavu\LinkedEvents\Model\PlaceDescription
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param \Metatavu\LinkedEvents\Model\PlaceDescription $description
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets position
     * @return \Metatavu\LinkedEvents\Model\PlacePosition
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     * @param \Metatavu\LinkedEvents\Model\PlacePosition $position
     * @return $this
     */
    public function setPosition($position)
    {
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets email
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     * @param string $email Contact email for the place, note that this is NOT multilingual
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets telephone
     * @return \Metatavu\LinkedEvents\Model\PlaceTelephone
     */
    public function getTelephone()
    {
        return $this->container['telephone'];
    }

    /**
     * Sets telephone
     * @param \Metatavu\LinkedEvents\Model\PlaceTelephone $telephone
     * @return $this
     */
    public function setTelephone($telephone)
    {
        $this->container['telephone'] = $telephone;

        return $this;
    }

    /**
     * Gets contactType
     * @return string
     */
    public function getContactType()
    {
        return $this->container['contactType'];
    }

    /**
     * Sets contactType
     * @param string $contactType FIXME: this seems unused in Helsinki data. Does any 6Aika city have use for describing contact type?
     * @return $this
     */
    public function setContactType($contactType)
    {
        $this->container['contactType'] = $contactType;

        return $this;
    }

    /**
     * Gets streetAddress
     * @return \Metatavu\LinkedEvents\Model\PlaceStreetAddress
     */
    public function getStreetAddress()
    {
        return $this->container['streetAddress'];
    }

    /**
     * Sets streetAddress
     * @param \Metatavu\LinkedEvents\Model\PlaceStreetAddress $streetAddress
     * @return $this
     */
    public function setStreetAddress($streetAddress)
    {
        $this->container['streetAddress'] = $streetAddress;

        return $this;
    }

    /**
     * Gets addressLocality
     * @return \Metatavu\LinkedEvents\Model\PlaceAddressLocality
     */
    public function getAddressLocality()
    {
        return $this->container['addressLocality'];
    }

    /**
     * Sets addressLocality
     * @param \Metatavu\LinkedEvents\Model\PlaceAddressLocality $addressLocality
     * @return $this
     */
    public function setAddressLocality($addressLocality)
    {
        $this->container['addressLocality'] = $addressLocality;

        return $this;
    }

    /**
     * Gets addressRegion
     * @return string
     */
    public function getAddressRegion()
    {
        return $this->container['addressRegion'];
    }

    /**
     * Sets addressRegion
     * @param string $addressRegion Larger region for address (like states), not typically used in Finland
     * @return $this
     */
    public function setAddressRegion($addressRegion)
    {
        $this->container['addressRegion'] = $addressRegion;

        return $this;
    }

    /**
     * Gets postalCode
     * @return string
     */
    public function getPostalCode()
    {
        return $this->container['postalCode'];
    }

    /**
     * Sets postalCode
     * @param string $postalCode Postal code of the location (as used by traditional mail)
     * @return $this
     */
    public function setPostalCode($postalCode)
    {
        $this->container['postalCode'] = $postalCode;

        return $this;
    }

    /**
     * Gets postOfficeBoxNum
     * @return string
     */
    public function getPostOfficeBoxNum()
    {
        return $this->container['postOfficeBoxNum'];
    }

    /**
     * Sets postOfficeBoxNum
     * @param string $postOfficeBoxNum PO box for traditional mail, in case mail is not delivered to the building
     * @return $this
     */
    public function setPostOfficeBoxNum($postOfficeBoxNum)
    {
        $this->container['postOfficeBoxNum'] = $postOfficeBoxNum;

        return $this;
    }

    /**
     * Gets addressCountry
     * @return string
     */
    public function getAddressCountry()
    {
        return $this->container['addressCountry'];
    }

    /**
     * Sets addressCountry
     * @param string $addressCountry Country for the place, NOT multilingual
     * @return $this
     */
    public function setAddressCountry($addressCountry)
    {
        $this->container['addressCountry'] = $addressCountry;

        return $this;
    }

    /**
     * Gets deleted
     * @return bool
     */
    public function getDeleted()
    {
        return $this->container['deleted'];
    }

    /**
     * Sets deleted
     * @param bool $deleted This place entry is not used anymore, but old events still reference it. This might be because of duplicate removal.
     * @return $this
     */
    public function setDeleted($deleted)
    {
        $this->container['deleted'] = $deleted;

        return $this;
    }

    /**
     * Gets dataSource
     * @return string
     */
    public function getDataSource()
    {
        return $this->container['dataSource'];
    }

    /**
     * Sets dataSource
     * @param string $dataSource Identifies the source for data, this is specific to API provider. This is useful for API users, as any data quality issues are likely to be specific to data source and workarounds can be applied as such.
     * @return $this
     */
    public function setDataSource($dataSource)
    {
        $this->container['dataSource'] = $dataSource;

        return $this;
    }

    /**
     * Gets publisher
     * @return string
     */
    public function getPublisher()
    {
        return $this->container['publisher'];
    }

    /**
     * Sets publisher
     * @param string $publisher Organization that provided the event that this place is associated with
     * @return $this
     */
    public function setPublisher($publisher)
    {
        $this->container['publisher'] = $publisher;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Metatavu\LinkedEvents\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Metatavu\LinkedEvents\ObjectSerializer::sanitizeForSerialization($this));
    }
}



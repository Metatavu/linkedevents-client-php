<?php
/**
 * FilterApiTest
 * PHP version 5
 *
 * @category Class
 * @package  Metatavu\LinkedEvents
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Linked Events information API
 *
 * Linked Events provides categorized data on events and places using JSON-LD format.  Events can be searched by date and location. Location can be exact address or larger area such as neighbourhood or borough  JSON-LD format is streamlined using include mechanism. API users can request that certain fields are included directly into the result, instead of being hyperlinks to objects.  Several fields are multilingual. These are implemented as object with each language variant as property. In this specification each multilingual field has (fi,sv,en) property triplet as example.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Metatavu\LinkedEvents;

use \Metatavu\LinkedEvents\Configuration;
use \Metatavu\LinkedEvents\ApiClient;
use \Metatavu\LinkedEvents\ApiException;
use \Metatavu\LinkedEvents\ObjectSerializer;

/**
 * FilterApiTest Class Doc Comment
 *
 * @category Class
 * @package  Metatavu\LinkedEvents
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FilterApiTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test case for keywordCreate
     *
     * Creates new keyword.
     *
     */
    public function testKeywordCreate()
    {
    }

    /**
     * Test case for keywordDelete
     *
     * Delete a keyword.
     *
     */
    public function testKeywordDelete()
    {
    }

    /**
     * Test case for keywordList
     *
     * Returns a list of keywords used for describing events.
     *
     */
    public function testKeywordList()
    {
    }

    /**
     * Test case for keywordRetrieve
     *
     * Return information for single keyword.
     *
     */
    public function testKeywordRetrieve()
    {
    }

    /**
     * Test case for keywordSetList
     *
     * Return as list of keyword_sets for grouping keywords.
     *
     */
    public function testKeywordSetList()
    {
    }

    /**
     * Test case for keywordSetRetrieve
     *
     * Return information about single keyword_set.
     *
     */
    public function testKeywordSetRetrieve()
    {
    }

    /**
     * Test case for keywordUpdate
     *
     * Update a keyword.
     *
     */
    public function testKeywordUpdate()
    {
    }

    /**
     * Test case for placeCreate
     *
     * Creates new place.
     *
     */
    public function testPlaceCreate()
    {
    }

    /**
     * Test case for placeDelete
     *
     * Delete a place.
     *
     */
    public function testPlaceDelete()
    {
    }

    /**
     * Test case for placeList
     *
     * Returns list of places used for describing events.
     *
     */
    public function testPlaceList()
    {
    }

    /**
     * Test case for placeRetrieve
     *
     * Return information for single place.
     *
     */
    public function testPlaceRetrieve()
    {
    }

    /**
     * Test case for placeUpdate
     *
     * Update a place.
     *
     */
    public function testPlaceUpdate()
    {
    }
}
